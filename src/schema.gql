# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Cursor for paging through collections"""
scalar ConnectionCursor

input CreateManyProductDTOSInput {
  """Array of records to create"""
  productDTOS: [CreateProductInput!]!
}

input CreateOneProductDTOInput {
  """The record to create"""
  productDTO: CreateProductInput!
}

input CreateProductInput {
  id: String!
  name: String!
  price: Float!
  quantity: Float!
  type: String!
}

input CursorPaging {
  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input DeleteManyProductDTOSInput {
  """Filter to find records to delete"""
  filter: ProductDTODeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteOneProductDTOInput {
  """The id of the record to delete."""
  id: ID!
}

type Mutation {
  createManyProductDTOS(input: CreateManyProductDTOSInput!): [ProductDTO!]!
  createOneProductDTO(input: CreateOneProductDTOInput!): ProductDTO!
  deleteManyProductDTOS(input: DeleteManyProductDTOSInput!): DeleteManyResponse!
  deleteOneProductDTO(input: DeleteOneProductDTOInput!): ProductDTODeleteResponse!
  updateManyProductDTOS(input: UpdateManyProductDTOSInput!): UpdateManyResponse!
  updateOneProductDTO(input: UpdateOneProductDTOInput!): ProductDTO!
}

type PageInfo {
  """The cursor of the last returned record."""
  endCursor: ConnectionCursor

  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor
}

type ProductDTO {
  id: String!
  name: String!
  price: Float!
  quantity: Float!
  type: String!
}

type ProductDTOAggregateGroupBy {
  name: String
}

type ProductDTOConnection {
  """Array of edges."""
  edges: [ProductDTOEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type ProductDTOCountAggregate {
  name: Int
}

input ProductDTODeleteFilter {
  and: [ProductDTODeleteFilter!]
  name: StringFieldComparison
  or: [ProductDTODeleteFilter!]
}

type ProductDTODeleteResponse {
  id: String
  name: String
  price: Float
  quantity: Float
  type: String
}

type ProductDTOEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductDTO"""
  node: ProductDTO!
}

input ProductDTOFilter {
  and: [ProductDTOFilter!]
  name: StringFieldComparison
  or: [ProductDTOFilter!]
}

type ProductDTOMaxAggregate {
  name: String
}

type ProductDTOMinAggregate {
  name: String
}

input ProductDTOSort {
  direction: SortDirection!
  field: ProductDTOSortFields!
  nulls: SortNulls
}

enum ProductDTOSortFields {
  name
}

input ProductDTOUpdateFilter {
  and: [ProductDTOUpdateFilter!]
  name: StringFieldComparison
  or: [ProductDTOUpdateFilter!]
}

type Query {
  productDTO(
    """The id of the record to find."""
    id: ID!
  ): ProductDTO
  productDTOS(
    """Specify to filter the records returned."""
    filter: ProductDTOFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductDTOSort!]! = []
  ): ProductDTOConnection!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

input UpdateManyProductDTOSInput {
  """Filter used to find fields to update"""
  filter: ProductDTOUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductInput!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateOneProductDTOInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductInput!
}

input UpdateProductInput {
  id: ID!
  name: String
  price: Float
  quantity: Float
  type: String
}